AMAZING HACK TO SEARCH FOR ANY FILE USE THE COMMAND CNTRL + P IN vscode

tsc : used for compiling all the TypeScript files into JavaScript
to generate the tsconfig.json use the following command : tsc --init 

In tsc.init change the following things :
           target : 'ES2016'
           root: './'
           "outDir": "./dis",   /*It specifies the path where the JS files will be generated after the transpilation*/
           "noEmitOnError": true,     /*Does not allow the transpilation untill the code id correct */
           "sourceMap": true,       /* Create source map files for emitted JavaScript files. used in debugging of the code  */

Created a launch.json file in the project by going into the debugger it tells the vscode how to debug the application
                 added the line : "preLaunchTask":"tsc: build - tsconfig.json" , to debug the typescript program

You can launch the the debugger using f10 then you can also list the variables you want ot watch in the debugger

------------------------------------------------------------------------------------------------------------------------------------------
CHAPTER 2 : DATATYPES

TypeScript introduces the following new DATATYPES : 
           any unknown never enum tuple  

           jiska koi DATATYPE nahi uska any but try to avoid using any as it kills the purpose of typescript

JavaScript already has the DATATYPES : 
          string boolean number null undefined object

------------------------------------------------------------------------------------------------------------------------------------------------
CHAPTER 3 : CALLBACK FUNCTIONS

function addi(number1: number, callback: (num :number)=>number) {  //(num :number)=>number : you have to treat this whole as the datype of the function
  callback(6);
  return number1;
}

// when you pass a callback function you basically pass a function saying that hey `addi` 
//I am passing you the arrow function with it's
// functionality HAS BEEN defined WHILE PASSING IT TO you AND YOU can use just the way you use other variables 
// Here but we have also specified what type raw structure(num :number)=>number YOU CAN ALSO SAY IT DATAYPE OF THE FUNCTION BEING PASSED) 
//of the function which `addi` will accept and it is a good practice to do so

console.log(
  addi(3, (num: number):number => {
    console.log(num + 2);
    return num;
  }),
);
--------------------------------------------------------------------------------------------------
CHAPTER 4 ARRAYS
let num1: number[] = [2, 2, 2, 4]; //By default arrays are dynamic in typescript to make it of one type you can specify the type of input array
let num2: any[] = [1, '2', 2];
function arrays(Oarr1:any[] , Oarr2:number[] ,callback: (arr1: number[], arr2: any[]) => any[]) {
   let outputarr= callback(Oarr1,Oarr2)
    {
        console.log(Oarr1);
    }
   
    console.log(outputarr);
    
}

arrays(num1,num2,(v1, v2) => {
 let v3 = v1.concat(v2)
 return v3
});

-------------------------------------------------------------------------------------------------
CHAPTER 5 FUNCTIONS

    "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */

// In typescript you exactly define what input parmeter you want and what you will do with it 
function calculateTax(salary : number , taxyear=2022) : number
{
   if(salary>500000 && taxyear>2021)
   {

     return (salary-500000)*0.1
   }
   return 0;
}


function calculateTax2(salary : number , taxyear? : number) : number
{
   if(salary>500000 && (taxyear||2022)>2021)
   {
     return (salary-500000)*0.1
   }
   return 0;
}

console.log(calculateTax(6000000));
---------------------------------------------------------------------------------------------------
CHAPTER 6 OBJECTS 
let employee: {
  readonly name: string; // the readonly allows the variable to be readonly and not be maipulated 
  faxnum?: number; //? makes the value to passed as optional
  retire: (age: number) => void;
  PhNum: number
} = {
    name: 'Hello',
    //providing the structure of the function
    retire: function (age: number): void {
        if (age > 60)
            console.log("the employtee has to retire");
    },
    PhNum: 79879_67989
};

----------------------------------------------------------------------------------------------------------------
CHAPTER 7 TYPE ALIAS

 the type alias is helpful as we do not want to repeat declarations for each new object 
//USE Camelcase for using type 

type Employees = {
    readonly name: string; // the readonly  makes variable readonly 
    faxnum?: number; //? makes the value to passed as optional
    retire: (age: number) => void;
    PhNum: number
}

let employees : Employees = {
      name: 'Hello',
      retire: function (age: number): void {
          if (age > 60)
              console.log("the employtee has to retire");
      },
      PhNum: 79879_67989,
      faxnum: 234_234
  };
  
---------------------------------------------------------------------------------------------------------------------------------------------------------------
CHAPTER 8 TYPE LITERALS

type abc =  1 | 2 | string  // | is for union and & is for intersection in tS
let val : abc = "hell" // Now val can only be be value 1 or 2 or a string

---------------------------------------------------------------------------------------------------------------------------------------------------------------
CHAPTER 9 UNION AND INTERSECTIONS

//interesction in typescript 

type Draggable = {
   drag : ()=>void
} 

type Resizeable = {
    resize : ( num2 : number ,num?:number)=>number
}

type UIWidget = Draggable & Resizeable

let textBox : UIWidget =
{
    drag : ()=>console.log("jej"),
    resize : (num)=>num*4
}
here as you can see we used interesection to declare a third type UIWidget
---------------------------------------------------------------------------------------------------------------------------------------------------------------